/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/models/Wolf.gltf 
*/

import { useAnimations, useGLTF } from '@react-three/drei'
import React, { useEffect, useRef } from 'react'
import { useSelector } from 'react-redux'

export function Wolf(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/Wolf.gltf')
  const { actions } = useAnimations(animations, group)
  const wolfStatus = useSelector(state => state.wolf.wolfStatus);

  useEffect(() => {
    // Detiene la acción anterior (si existe)
    if (actions.currentAction) {
      actions.currentAction.stop();
    }

    // Configura la nueva acción
    const newAction = actions[wolfStatus];
    newAction.reset().fadeIn(0.5).play();

    // Actualiza la acción actual
    actions.currentAction = newAction;
  }, [wolfStatus, actions]);

  console.log(wolfStatus, actions);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="AnimalArmature">
          <primitive object={nodes.Body} />
          <primitive object={nodes.IKBackLegL} />
          <primitive object={nodes.IKFrontLegL} />
          <primitive object={nodes.IKBackLegR} />
          <primitive object={nodes.IKFrontLegR} />
          <group name="Wolf">
            <skinnedMesh name="Cube" geometry={nodes.Cube.geometry} material={materials.Main} skeleton={nodes.Cube.skeleton} />
            <skinnedMesh name="Cube_1" geometry={nodes.Cube_1.geometry} material={materials.Nose} skeleton={nodes.Cube_1.skeleton} />
            <skinnedMesh name="Cube_2" geometry={nodes.Cube_2.geometry} material={materials.Main_Light} skeleton={nodes.Cube_2.skeleton} />
            <skinnedMesh name="Cube_3" geometry={nodes.Cube_3.geometry} material={materials.Eyes_Black} skeleton={nodes.Cube_3.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/Wolf.gltf')
